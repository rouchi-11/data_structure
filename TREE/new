class node:
    def __init__(self, data):
        self.data = data
        self.right = None
        self.left = None

class tree:
    def __init__(self):
        self.root = None

    def insert(self, root, data):
        new_node = node(data)
        if self.root == None:
            self.root = new_node
        else:
            if root.data <= new_node.data:
                if root.right == None:
                    root.right = new_node
                else:
                    self.insert(root.right, data)
            else:
                if root.left == None:
                    root.left = new_node
                else:
                    self.insert(root.left, data)
    
    def delete(self,value):
        self.root=self.delete_rec(self.root,value)
    def delete_rec(self,node,value):
        if node is None:
            return node
        
        if value<node.value:
            node.left=self.delete_rec(node.left,value)
        elif value>node.value:
            node.right=self.delete_rec(node.right,value)
        else:
            if node.left is None:
                return node.right
            elif node.right is None:
                return node.left
            min_larger_node=self.findMin(node.right)
            node.value=min_larger_node.value
            node.right=self.delete_rec(node.right,min_larger_node.value)
            return node
    def findMin(self,node):
        current=node
        while current.left is not None:
            current=current.left
        return current
    
            
        
