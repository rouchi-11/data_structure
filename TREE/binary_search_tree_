class node:
    def __init__(self, data):
        self.data = data
        self.right = None
        self.left = None

class tree:
    def __init__(self):
        self.root = None

    def insert(self, root, data):
        new_node = node(data)
        if self.root == None:
            self.root = new_node
        else:
            if root.data <= new_node.data:
                if root.right == None:
                    root.right = new_node
                else:
                    self.insert(root.right, data)
            else:
                if root.left == None:
                    root.left = new_node
                else:
                    self.insert(root.left, data)

    def search(self, root, data):
        if root == None:
            print("Invalid data...")
            return False
        elif root.data == data:
            print("Your data is found :->", root.data)
            return root.data
        elif root.data <= data:
            return self.search(root.right, data)
        else:
            return self.search(root.left, data)

    def max_node(self, root):
        if root.right == None:
            return root.data
        else:
            return self.max_node(root.right)

    def delete(self, root, data):
        del_node = node(data)
        if root == None:
            print("Invalid")
            return root
        else:
            if root.data < del_node.data:
                root.right = self.delete(root.right, data)
            elif root.data > del_node.data:
                root.left = self.delete(root.left, data)
            else:
                if root.left == None and root.right == None:
                    root = None
                    return root
                elif root.left == None or root.right == None:
                    if root.left == None:
                        return root.right
                    else:
                        return root.left
                else:
                    temp = self.max_node(root.left)
                    root.data = temp
                    root.left = self.delete(root.left, temp)
            return root

    def display(self, root, level=0):
        # Recursive function to display the tree in a structured format
        if root != None:
            self.display(root.right, level + 1)
            print('     ' * level + f'|-- {root.data}')
            self.display(root.left, level + 1)

def menu():
    print("\n1. Insert")
    print("2. Search")
    print("3. Delete")
    print("4. Display Tree")
    print("5. Exit")

bst = tree()
while True:
    menu()
    ch = int(input("Enter your choice: "))
    if ch == 1:
        data = int(input("Enter data: "))
        bst.insert(bst.root, data)
    elif ch == 2:
        key = int(input("Enter data to search: "))
        bst.search(bst.root, key)
    elif ch == 3:
        data = int(input("Enter data to delete: "))
        bst.delete(bst.root, data)
    elif ch == 4:
        print("Displaying Tree Structure:")
        bst.display(bst.root)
    elif ch == 5:
        break
    else:
        print("Invalid Choice!")
