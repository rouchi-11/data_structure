class Node:
    def __init__(self, data):
        self.data = data
        self.pref = None
        self.nref = None

class CircularDLL:
    def __init__(self):
        self.head = None

    def print_CDLL(self):
        if self.head is None:
            print('The Circular Doubly Linked list is empty.')
            return
        n = self.head
        while True:
            print(n.data, '<===>', end=" ")
            n = n.nref
            if n == self.head:
                break
        print()

    def print_CDLL_reverse(self):
        if self.head is None:
            print('The Circular Doubly Linked list is empty.')
            return
        n = self.head
        while n.nref != self.head:
            n = n.nref
        while True:
            print(n.data, '<===>', end=" ")
            n = n.pref
            if n.nref == self.head:
                break
        print()

    def add_begin(self, data):
        new_node = Node(data)
        if self.head is None:
            self.head = new_node
            new_node.nref = new_node
            new_node.pref = new_node
        else:
            tail = self.head.pref
            new_node.nref = self.head
            new_node.pref = tail
            tail.nref = new_node
            self.head.pref = new_node
            self.head = new_node

    def add_end(self, data):
        new_node = Node(data)
        if self.head is None:
            self.head = new_node
            new_node.nref = new_node
            new_node.pref = new_node
        else:
            tail = self.head.pref
            tail.nref = new_node
            new_node.pref = tail
            new_node.nref = self.head
            self.head.pref = new_node

    def delete_from_begin(self):
        if self.head is None:
            print('List is already empty.')
            return
        if self.head.nref == self.head:
            self.head = None
            print('List is empty now.')
        else:
            tail = self.head.pref
            self.head = self.head.nref
            self.head.pref = tail
            tail.nref = self.head

    def delete_from_end(self):
        if self.head is None:
            print('List is already empty.')
            return
        if self.head.nref == self.head:
            self.head = None
            print('List is empty now.')
        else:
            tail = self.head.pref
            tail.pref.nref = self.head
            self.head.pref = tail.pref

cdll = CircularDLL()

cdll.add_end(10)
cdll.add_end(20)
cdll.add_end(30)
print("CDLL after adding nodes at the end:")
cdll.print_CDLL()

cdll.add_begin(0)
cdll.add_begin(-10)
print("CDLL after adding nodes at the beginning:")
cdll.print_CDLL()

print("CDLL in reverse order:")
cdll.print_CDLL_reverse()

cdll.delete_from_begin()
print("CDLL after deleting from the beginning:")
cdll.print_CDLL()

cdll.delete_from_end()
print("CDLL after deleting from the end:")
cdll.print_CDLL()
