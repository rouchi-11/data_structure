class Item:
    def __init__(self, name, quantity, price):
        self.name = name
        self.quantity = quantity
        self.price = price

    def __str__(self):
        return f"Item Name: {self.name}, Quantity: {self.quantity}, Price: ${self.price:.2f}"



    def __init__(self, item):
        self.item = item
        self.prev = None
        self.next = None



class DoublyCircularLinkedList:
    def __init__(self):
        self.head = None

    
    def add_item(self, name, quantity, price):
        new_item = Item(name, quantity, price)
        new_node = Node(new_item)

        if self.head is None:
            
            self.head = new_node
            self.head.next = self.head
            self.head.prev = self.head
        else:
            
            last = self.head.prev
            last.next = new_node
            new_node.prev = last
            new_node.next = self.head
            self.head.prev = new_node
        print(f"Item added: {name}")

    
    def remove_item(self, name):
        if self.head is None:
            print("No items to remove.")
            return

        current = self.head
        while True:
            if current.item.name == name:
                if current == self.head and self.head.next == self.head:
                    #  only one item
                    self.head = None
                else:
                    prev_node = current.prev
                    next_node = current.next
                    prev_node.next = next_node
                    next_node.prev = prev_node
                    if current == self.head:
                        self.head = next_node
                print(f"Item removed: {name}")
                return
            current = current.next
            if current == self.head:
                break
        print(f"Item not found: {name}")

    
    def update_item(self, name, new_quantity, new_price):
        if self.head is None:
            print("No items to update.")
            return

        current = self.head
        while True:
            if current.item.name == name:
                current.item.quantity = new_quantity
                current.item.price = new_price
                print(f"Item updated: {name}")
                return
            current = current.next
            if current == self.head:
                break
        print(f"Item not found: {name}")

    
    def display_order(self):
        if self.head is None:
            print("No items in the order.")
            return

        current = self.head
        print("Order Details:")
        while True:
            print(current.item)
            current = current.next
            if current == self.head:
                break

    
    def search_item(self, name):
        if self.head is None:
            print("No items to search.")
            return

        current = self.head
        while True:
            if current.item.name == name:
                print(f"Item found: {current.item}")
                return
            current = current.next
            if current == self.head:
                break
        print(f"Item not found: {name}")


# Main function to test the functionality
if __name__ == "__main__":
    order_list = DoublyCircularLinkedList()

    
    order_list.add_item("Laptop", 2, 999.99)
    order_list.add_item("Headphones", 5, 199.99)
    order_list.add_item("Mouse", 3, 49.99)

    
    order_list.display_order()

    order_list.update_item("Headphones", 4, 179.99)
    order_list.display_order()

    
    order_list.search_item("Mouse")

    
    order_list.remove_item("Laptop")
    order_list.display_order()
