class Node:
    def __init__(self, patient_id, name, age, patient_problem):
        self.patient_id = patient_id
        self.name = name
        self.age = age
        self.patient_problem = patient_problem
        self.next = None

class LinkedList:
    def __init__(self):
        self.head = None

    def add(self, patient_id, name, age, patient_problem):
        new_node = Node(patient_id, name, age, patient_problem)
        if self.head is None:
            self.head = new_node
        else:
            current = self.head
            while current.next:
                current = current.next
            current.next = new_node

    def remove_front(self):
        if self.head is None:
            print("No patients in the queue.")
            return
        print(f"Patient {self.head.name} (ID: {self.head.patient_id}) is being examined and removed from the queue.")
        self.head = self.head.next

   
    def move_to_front(self, patient_id):
        if self.head is None or self.head.patient_id == patient_id:
            print(f"Patient with ID {patient_id} is already at the front or the queue is empty.")
            return
        
        current = self.head
        prev = None
        while current and current.patient_id != patient_id:
            prev = current
            current = current.next
        
        if current is None:
            print(f"Patient with ID {patient_id} not found.")
            return
        
 
        if prev:
            prev.next = current.next
        current.next = self.head
        self.head = current
        print(f"Patient with ID {patient_id} has been moved to the front of the queue.")

    def search(self, patient_id):
        current = self.head
        while current:
            if current.patient_id == patient_id:
                return current
            current = current.next
        return None

    def display(self):
        if self.head is None:
            print("The queue is currently empty.")
            return
        current = self.head
        while current:
            print(f"ID: {current.patient_id}, Name: {current.name}, Age: {current.age}, Illness: {current.patient_problem}")
            current = current.next

    def update_patient(self, patient_id, new_name=None, new_age=None, new_problem=None):
        patient = self.search(patient_id)
        if patient:
            if new_name:
                patient.name = new_name
            if new_age:
                patient.age = new_age
            if new_problem:
                patient.patient_problem = new_problem
            print(f"Patient {patient_id} information updated successfully.")
        else:
            print(f"Patient with ID {patient_id} not found.")

class HospitalManagementSystem:
    def __init__(self):
        self.queue = LinkedList()

    def menu(self):
        while True:
            print("\n--- Hospital Management System ---")
            print("1. Add Patient")
            print("2. Remove Patient for Examination")
            print("3. Move Patient to Front (Priority)")
            print("4. Display Patient Queue")
            print("5. Search for a Patient")
            print("6. Update Patient Information")
            print("7. Exit")
            choice = input("Enter your choice: ")

            if choice == '1':
                self.add_patient()
            elif choice == '2':
                self.queue.remove_front()
            elif choice == '3':
                self.move_patient_to_front()
            elif choice == '4':
                self.queue.display()
            elif choice == '5':
                self.search_patient()
            elif choice == '6':
                self.update_patient_info()
            elif choice == '7':
                print("Exiting system.")
                break
            else:
                print("Invalid choice. Please try again.")

    def add_patient(self):
        patient_id = input("Enter patient ID: ")
        name = input("Enter patient name: ")
        age = int(input("Enter patient age: "))
        patient_problem = input("Enter patient's problem: ")
        self.queue.add(patient_id, name, age, patient_problem)
        print("Patient added successfully.")

    def move_patient_to_front(self):
        patient_id = input("Enter patient ID to move to front: ")
        self.queue.move_to_front(patient_id)

    def search_patient(self):
        patient_id = input("Enter patient ID to search: ")
        patient = self.queue.search(patient_id)
        if patient:
            print(f"Patient found: ID: {patient.patient_id}, Name: {patient.name}, Age: {patient.age}, Illness: {patient.patient_problem}")
        else:
            print(f"Patient with ID {patient_id} not found.")

    def update_patient_info(self):
        patient_id = input("Enter patient ID to update: ")
        name = input("Enter new name (leave blank to skip): ")
        age_input = input("Enter new age (leave blank to skip): ")
        problem = input("Enter new problem (leave blank to skip): ")

        age = int(age_input) if age_input else None
        self.queue.update_patient(patient_id, new_name=name if name else None, new_age=age, new_problem=problem)

if __name__ == "__main__":
    hms = HospitalManagementSystem()
    hms.menu()
